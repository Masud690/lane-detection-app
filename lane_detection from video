import cv2
import numpy as np
from google.colab.patches import cv2_imshow

def region_of_interest(img):
    height = img.shape[0]
    width = img.shape[1]
    polygons = np.array([[
        (int(0.1 * width), height),
        (int(0.45 * width), int(0.6 * height)),
        (int(0.55 * width), int(0.6 * height)),
        (int(0.9 * width), height)
    ]])
    mask = np.zeros_like(img)
    cv2.fillPoly(mask, polygons, 255)
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

def draw_lines(img, lines):
    line_img = np.zeros_like(img)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv2.line(line_img, (x1, y1), (x2, y2), (0, 255, 0), 10)
    return line_img

def lane_detection_pipeline(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)
    cropped_edges = region_of_interest(edges)
    lines = cv2.HoughLinesP(cropped_edges, rho=2, theta=np.pi / 180, threshold=50, minLineLength=40, maxLineGap=100)
    line_img = draw_lines(frame, lines)
    combo = cv2.addWeighted(frame, 0.8, line_img, 1, 1)
    return combo

# Read and display a few frames from uploaded video
cap = cv2.VideoCapture('/content/solidWhiteRight.mp4')
frame_count = 0

while cap.isOpened() and frame_count < 10:  # Limit to 10 frames for display
    ret, frame = cap.read()
    if not ret:
        break
    output = lane_detection_pipeline(frame)
    cv2_imshow(output)
    frame_count += 1

cap.release()
