import cv2
import numpy as np
import matplotlib.pyplot as plt

def region_of_interest(img):
    height = img.shape[0]
    width = img.shape[1]
    # Define a trapezoid mask for lane area (adjust if needed)
    polygons = np.array([
        [(int(0.1*width), height),
         (int(0.45*width), int(0.6*height)),
         (int(0.55*width), int(0.6*height)),
         (int(0.9*width), height)]
    ])
    mask = np.zeros_like(img)
    cv2.fillPoly(mask, polygons, 255)
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

def draw_lines(img, lines):
    line_img = np.zeros_like(img)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv2.line(line_img, (x1, y1), (x2, y2), (255, 0, 0), 10)
    return line_img

def lane_detection_pipeline(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blur, 50, 150)
    cropped = region_of_interest(edges)
    lines = cv2.HoughLinesP(cropped, 2, np.pi/180, 50, np.array([]), minLineLength=40, maxLineGap=100)
    line_img = draw_lines(image, lines)
    combo = cv2.addWeighted(image, 0.8, line_img, 1, 1)
    return combo

def main():
    # Change the filename here to your image
    image_path = '/content/laneLines_thirdPass.jpg'
    
    # Read image
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Image not found or path is incorrect.")
        return
    
    # Process image
    output = lane_detection_pipeline(image)
    
    # Convert to RGB for displaying with matplotlib
    output_rgb = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)
    
    # Show original and result
    plt.figure(figsize=(12,6))
    plt.subplot(1,2,1)
    plt.title("Original Image")
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    
    plt.subplot(1,2,2)
    plt.title("Lane Detection Output")
    plt.imshow(output_rgb)
    plt.axis('off')
    
    plt.show()

if __name__ == "__main__":
    main()
